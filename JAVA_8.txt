List<Employee> employeeList = new ArrayList<Employee>();

employeeList.add(new Employee(111, "Jiya Brein", 32, "Female", "HR", 2011, 25000.0));
employeeList.add(new Employee(122, "Paul Niksui", 25, "Male", "Sales And Marketing", 2015, 13500.0));
employeeList.add(new Employee(133, "Martin Theron", 29, "Male", "Infrastructure", 2012, 18000.0));
employeeList.add(new Employee(144, "Murali Gowda", 28, "Male", "Product Development", 2014, 32500.0));
employeeList.add(new Employee(155, "Nima Roy", 27, "Female", "HR", 2013, 22700.0));
employeeList.add(new Employee(166, "Iqbal Hussain", 43, "Male", "Security And Transport", 2016, 10500.0));
employeeList.add(new Employee(177, "Manu Sharma", 35, "Male", "Account And Finance", 2010, 27000.0));
employeeList.add(new Employee(188, "Wang Liu", 31, "Male", "Product Development", 2015, 34500.0));
employeeList.add(new Employee(199, "Amelia Zoe", 24, "Female", "Sales And Marketing", 2016, 11500.0));
employeeList.add(new Employee(200, "Jaden Dough", 38, "Male", "Security And Transport", 2015, 11000.5));
employeeList.add(new Employee(211, "Jasna Kaur", 27, "Female", "Infrastructure", 2014, 15700.0));
employeeList.add(new Employee(222, "Nitin Joshi", 25, "Male", "Product Development", 2016, 28200.0));
employeeList.add(new Employee(233, "Jyothi Reddy", 27, "Female", "Account And Finance", 2013, 21300.0));
employeeList.add(new Employee(244, "Nicolus Den", 24, "Male", "Sales And Marketing", 2017, 10700.5));
employeeList.add(new Employee(255, "Ali Baig", 23, "Male", "Infrastructure", 2018, 12700.0));
employeeList.add(new Employee(266, "Sanvi Pandey", 26, "Female", "Product Development", 2015, 28900.0));
employeeList.add(new Employee(277, "Anuj Chettiar", 31, "Male", "Product Development", 2012, 35700.0));


// How many male and female employees are there in the organization?
employeeList.stream().collect(Collectors.groupBy(x -> x.getGender(), Collectors.counting()));

// Print the name of all departments in the organization?
employeeList.stream().map(x -> x.getDepartment()).distinct().forEach(System.out::println);

// What is the average age of male and female employees?
employeeList.stream().collect(Collectors.groupBy(x -> x.getGender(), Collectors.averagingDouble(x -> x.getAge())));

// Get the details of highest paid employee in the organization?
employeeList.stream().max(Comparator.comparingDouble(x -> x.getSalary()));

// Get the names of all employees who have joined after 2015?
employeeList.stream().filter(x -> x.getYearOfJoining() > 2015).map(x -> x.getName()).collect(Collectors.toList());

// Count the number of employees in each department?
employeeList.stream().collect(Collectors.groupBy(x -> x.getDepartment(), Collectors.counting()));

// What is the average salary of each department?
employeeList.stream().collect(Collectors.groupBy(x -> x.getDepartment(), Collectors.averagingDouble(x -> x.getSalary())));

// Get the details of youngest male employee in the product development department?
employeeList.stream().filter(x -> x.getDepartment().equals("Product Development") && x.getGender().equals("Male"))
.min(Comparator.comparingInt(x -> x.getAge()));

// Who has the most working experience in the organization?
employeeList.stream(Comparator.comparingInt(x -> x.getYearOfJoining())).findFirst();

// How many male and female employees are there in the sales and marketing team?
employeeList.stream().filter(x -> x.getDepartment().equals("Sales And Marketing"))
.collect(Collectors.groupBy(x -> x.getGender(), Collectors.counting()));

// What is the average salary of male and female employees?
employeeList.stream().collect(Collectors.groupBy(x -> x.getGender(), Collectors.averagingDouble(x -> x.getSalary())));

// List down the names of all employees in each department?
employeeList.stream().collect(Collectors.groupBy(x -> x.getDepartment(), Collectors.mapping(x -> x.getName(), Collectors.toList())));

//What is the average salary and total salary of the whole organization?
employeeList.stream().collect(Collectors.summarizingDouble(x -> x.getSalary()));

//Who is the oldest employee in the organization? What is his age and which department he belongs to?
employeeList.stream().max(Comparator.comparingInt(x -> x.getAge())).orElse(null);

